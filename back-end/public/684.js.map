{"version":3,"file":"684.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAE0E;;;;;;;;;AAoCpE,MAAOC,oBAAoB;EAE/BC,YACSC,IAAiB,EACjBC,IAAiB,EACjBC,EAAmB,EACnBC,MAAqB,EACrBC,GAA4B,EAC5BC,YAAiC,EACjCC,eAAgC,EAChCC,gBAAyC;IAPzC,KAAAP,IAAI,GAAJA,IAAI;IACJ,KAAAC,IAAI,GAAJA,IAAI;IACJ,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,GAAG,GAAHA,GAAG;IACH,KAAAC,YAAY,GAAZA,YAAY;IACZ,KAAAC,eAAe,GAAfA,eAAe;IACf,KAAAC,gBAAgB,GAAhBA,gBAAgB;EACrB;EAEGC,QAAQA,CAACC,KAAoB;IAClC,OAAOA,KAAK,CAACC,QAAQ,EAAEC,YAAY;EACrC;EAEOC,SAASA,CAACH,KAAoB;IACnC,OAAO;MACLI,QAAQ,EAAE,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;MAClCC,SAAS,EAAE,IAAI,CAACA,SAAS,CAACD,IAAI,CAAC,IAAI,CAAC;MACpCE,OAAO,EAAE,KAAK;MACdC,MAAM,EAAE,qCAAqC;MAC7CC,OAAO,EAAE,IAAI,CAACX,gBAAgB,CAACW,OAAO,EAAE;MACxCC,UAAU,EAAE,IAAI,CAACZ,gBAAgB,CAACY,UAAU,CAACV,KAAK,CAAC;MACnDD,QAAQ,EAAEC,KAAK,CAACC,QAAQ,EAAEC,YAAY;MACtCS,WAAW,EAAEX,KAAK,CAACC,QAAQ,EAAEW;KAC9B;EACH;EAEOR,QAAQA,CAACS,MAAsB,EAAEC,IAAgB;IACtD,MAAMd,KAAK,GAAGa,MAAuB;IACrC,MAAME,SAAS,GAAGD,IAAI,IAAI,CAACd,KAAK,EAAEgB,UAAU,IAAI,EAAE,EAAEC,IAAI,CAACC,CAAC,IAAIlB,KAAK,EAAEmB,YAAY,EAAEC,MAAM,IAAIF,CAAC,CAACG,EAAE,IAAIrB,KAAK,EAAEmB,YAAY,CAAC,IAAInB,KAAK,EAAEe,SAAS;IAC7I,IAAIF,MAAM,IAAIE,SAAS,IAAI,CAACA,SAAS,CAACO,WAAW,EAAEL,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACK,UAAU,IAAI,IAAI,CAAChC,IAAI,CAACiC,OAAQ,CAACH,EAAE,CAAC,EAAE;MACnG,MAAMI,cAAc,GAAGzB,KAAK,CAAC0B,eAAe;MAC5C,MAAMzB,QAAQ,GAAGD,KAAK,CAACC,QAAQ;MAC/B,MAAM0B,QAAQ,GAAG,IAAI,CAACpC,IAAI,CAACoC,QAAS;MACpC,IAAIC,GAAG,GAAa,EAAE;MACtB,IAAI3B,QAAQ,EAAE4B,sCAAsC,EAAED,GAAG,CAACE,IAAI,CAAC9B,KAAK,CAACuB,UAAU,CAAC;MAChF,IAAItB,QAAQ,EAAE8B,wCAAwC,EAAEH,GAAG,CAACE,IAAI,CAAC,GAAG,IAAI,CAACvC,IAAI,CAACyC,eAAe,CAACC,GAAG,CAACf,CAAC,IAAIA,CAAC,CAACG,EAAE,CAAC,CAAC;MAC7G,IAAIpB,QAAQ,EAAEiC,wCAAwC,EAAEN,GAAG,CAACE,IAAI,CAAC9B,KAAK,CAACmC,OAAO,EAAEC,MAAM,EAAEf,EAAE,IAAI,EAAE,EAAErB,KAAK,CAACmC,OAAO,EAAEE,iBAAiB,EAAEhB,EAAE,IAAI,EAAE,CAAC;MAC7I,IAAIpB,QAAQ,EAAEqC,yCAAyC,EAAEV,GAAG,CAACE,IAAI,CAACH,QAAQ,CAACY,SAAS,IAAI,EAAE,EAAEZ,QAAQ,CAACa,oBAAoB,IAAI,EAAE,CAAC;MAChI,OAAO,CAAC,CAACf,cAAc,IAAIG,GAAG,CAACa,QAAQ,CAAC,IAAI,CAAClD,IAAI,CAACiC,OAAQ,CAACH,EAAE,CAAC;;IAEhE,OAAO,KAAK;EACd;EAEOf,SAASA,CAACO,MAAqB,EAAEE,SAAoB,EAAE2B,QAAa;IACzE,MAAM1C,KAAK,GAAGa,MAAuB;IACrC,IAAI8B,IAAI,GAAiB,EAAE;IAC3B,IAAI3C,KAAK,EAAEmB,YAAY,IAAIJ,SAAS,CAACM,EAAE,EAAEsB,IAAI,CAACb,IAAI,CAAC;MAAEc,GAAG,EAAE7B,SAAS,CAACM,EAAE;MAAEwB,KAAK,EAAE,SAAS;MAAEC,IAAI,EAAE,iBAAiB;MAAEC,KAAK,EAAE;IAAS,CAAE,CAAC;IACtI,IAAIC,IAAI,CAACC,SAAS,CAACP,QAAQ,CAACC,IAAI,CAAC,IAAIK,IAAI,CAACC,SAAS,CAACN,IAAI,CAAC,EAAED,QAAQ,CAACC,IAAI,GAAGA,IAAI;IAC/E,OAAOD,QAAQ,CAACC,IAAI;EACtB;EAEA;;;;;;;EAOOO,WAAWA,CAACC,oBAA0C,EAAEC,aAA6B;IAC1F;;;;IAIA,IAAIpD,KAAK,GAAGoD,aAAa,IAAID,oBAAoB,CAACE,cAAc;IAChE,IAAIT,GAAG,GAA6BO,oBAAoB,CAACG,qBAAqB,EAAEC,aAAa,EAAEC,UAAU,IAAIxD,KAAM,CAACwD,UAAU,GAAG,iBAAiB,GAC/IL,oBAAoB,CAACG,qBAAqB,GAAG,eAAe,GAC5D,CAAC,CAACH,oBAAoB,CAACM,KAAK,EAAErC,MAAM,GAAG,aAAa,GAAG,aAAe;IACzE,IAAIsC,MAAM,GAAG,IAAI,CAAChE,MAAM,CAACiE,+BAA+B,CAAC1C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC0B,GAAG,IAAIA,GAAG,CAAC,IAAI;MAACA,GAAG,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAe,CAAC;IACrH,IAAIe,IAAI,GAAG5D,KAAK,EAAE6D,SAAS,EAAEC,WAAW,EAAER,qBAAqB,EAAES,OAAO,EAAEH,IAAI,IAAIT,oBAAoB,CAACG,qBAAqB,EAAES,OAAO,EAAEH,IAAI,IAAI,eAAe;IAC9J,IAAII,SAAS,GAAGhE,KAAK,EAAE6D,SAAS,EAAEC,WAAW,EAAER,qBAAqB,EAAEU,SAAS,IAAIb,oBAAoB,CAACG,qBAAqB,EAAEU,SAAS,IAAI,EAAE;IAC9I,OAAO;MAAExD,MAAM,EAAEkD,MAAM,CAACb,KAAK;MAAEoB,GAAG,EAAEP,MAAM,CAACX,KAAK,IAAI,QAAQ;MAAEa,IAAI,EAAEA,IAAI;MAAEM,IAAI,EAAEtB,GAAG;MAAEoB,SAAS,EAAEA;IAAS,CAAC;EAC5G;EAEA;;;;;;;;;EASOG,YAAYA,CAACC,eAA8B,EAAEC,SAAwB,EAAEC,WAAoB,EAAEC,WAAoB;IACtH,IAAIF,SAAS,CAAC7C,OAAO,IAAI6C,SAAS,CAAClC,OAAO,EAAE;MAC1C,IAAIqC,YAAY,GAAG,IAAI,CAAC7E,GAAI,CAACe,UAAU,CAAC0D,eAAe,CAAC;MACxD,IAAIK,MAAM,GAAG,IAAI,CAAC9E,GAAI,CAACe,UAAU,CAAC2D,SAAS,CAAC;MAC5C,IAAIpE,QAAQ,GAAGoE,SAAS,CAACpE,QAAQ;MACjC;MACAwE,MAAM,CAACjD,OAAO,CAACkD,wBAAwB,GAAGJ,WAAW,IAAID,SAAS,CAAC7C,OAAO,EAAEkD,wBAAwB,IAAI,EAAE;MAC1GD,MAAM,CAACtC,OAAO,CAACuC,wBAAwB,GAAGH,WAAW,IAAIF,SAAS,CAAClC,OAAO,EAAEuC,wBAAwB,IAAI,EAAE;MAC1G;MACA,IAAI,CAACzE,QAAQ,EAAE0E,iBAAiB,IAAIN,SAAS,CAAClD,YAAY,EAAEC,MAAM,KAAK4B,IAAI,CAACC,SAAS,CAACwB,MAAM,CAAC,IAAIzB,IAAI,CAACC,SAAS,CAACuB,YAAY,CAAC,IAAIvE,QAAQ,EAAEC,YAAY,EAAE;QACvJ,IAAIa,SAAS,GAAGsD,SAAS,CAACrD,UAAU,EAAEC,IAAI,CAAEC,CAAY,IAAKA,CAAC,CAACG,EAAE,IAAIgD,SAAS,CAAClD,YAAY,CAAC;QAC5F,IAAI,CAACkD,SAAS,CAAClD,YAAY,EAAEC,MAAM,IAAI,CAACL,SAAS,IAAIA,SAAS,CAACO,WAAW,EAAEF,MAAM,IAAIL,SAAS,CAACmD,IAAI,IAAI,MAAM,EAAE;UAC9GnD,SAAS,GAAG,IAAI3B,qEAAS,CAAC;YACxBiC,EAAE,EAAE,IAAI,CAAC1B,GAAG,EAAEiF,YAAY,EAAE;YAC5BV,IAAI,EAAE,MAAM;YACZ3D,OAAO,EAAE,KAAK;YACdC,MAAM,EAAE,qCAAqC;YAC7CqE,QAAQ,EAAE,IAAI,CAAChF,eAAe,CAACiF,cAAc,CAAC7E,QAAQ,EAAEC,YAAY,EAAE2E,QAAQ,IAAI,EAAE,EAAEJ,MAAM,CAAC;YAC7FM,MAAM,EAAE,QAAQ;YAChBC,OAAO,EAAE,KAAK;YACdjF,QAAQ,EAAEE,QAAQ,EAAEC,YAAY,EAAE2E,QAAQ;YAC1CpE,OAAO,EAAE,IAAI,CAACd,GAAI,CAACc,OAAO,EAAE;YAC5BC,UAAU,EAAE+D,MAAM;YAClBQ,WAAW,EAAE,IAAI,CAAC1F,IAAI,CAACoC,QAAQ,EAAEN,EAAE;YACnC6D,iBAAiB,EAAEb,SAAS,CAAChD,EAAE;YAC/BV,WAAW,EAAEV,QAAQ,EAAEW;WACxB,CAAC;UACFyD,SAAS,CAACrD,UAAU,CAACc,IAAI,CAACf,SAAS,CAAC;SACrC,MAAM;UACLA,SAAS,CAAC8D,QAAQ,GAAG,IAAI,CAAChF,eAAe,CAACiF,cAAc,CAAC7E,QAAQ,EAAEC,YAAY,EAAE2E,QAAQ,IAAI,EAAE,EAAEJ,MAAM,CAAC;UACxG1D,SAAS,CAACN,OAAO,GAAG,IAAI,CAACd,GAAI,CAACc,OAAO,EAAE;UACvCM,SAAS,CAACL,UAAU,GAAG+D,MAAM;UAC7B1D,SAAS,CAACiE,OAAO,GAAGjE,SAAS,CAACiE,OAAO,IAAI,KAAK,GAAG,KAAK,GAAG,MAAM;;QAEjEX,SAAS,CAACtD,SAAS,GAAGA,SAAS;QAC/BsD,SAAS,CAAClD,YAAY,GAAGJ,SAAS,EAAEM,EAAE,IAAI,IAAI;;;IAGlD,OAAOgD,SAAS,CAACtD,SAAS;EAC5B;EAEA;;;;;EAKOoE,aAAaA,CAAC/B,aAA4B;IAC/C,IAAIA,aAAa,CAACgC,UAAU,EAAE,OAAO,UAAU,CAAC,KAC3C,IAAIhC,aAAa,CAACiC,iBAAiB,EAAE,OAAO,WAAW,CAAC,KACxD,OAAOjC,aAAa,CAAC2B,MAAO;EACnC;EAEA;;;;;EAKSO,QAAQA,CAAClC,aAA4B;IAC1C,OAAO,CAACA,aAAa,CAACgC,UAAU,IAAIhC,aAAa,CAAC2B,MAAM,IAAI,WAAW,IAAI,CAAC3B,aAAa,CAACiC,iBAAiB;EAC7G;EAEF;;;;;;EAMOE,4BAA4BA,CAACC,YAAwC,EAAEvF,QAAmB;IAC/F,OAAO,CAACuF,YAAY,IAAI,CAACvF,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAACT,IAAI,CAACiG,QAAQ,CAACD,YAAY,CAACE,QAAQ,CAAC,GAAGzF,QAAQ,CAAC0F,yBAAyB,GAAG,IAAI,CAACnG,IAAI,CAACiG,QAAQ,CAAC,IAAI,CAAClG,IAAI,CAACqG,IAAI,CAAC;EAC9J;EAEA;;;;;;EAMOC,OAAOA,CAACL,YAAuC,EAAEvF,QAAkB,EAAE6F,OAA4B;IACtG,IAAI,CAACrG,EAAE,CAACsG,QAAQ,CAAC;MAACC,KAAK,EAAE,CAAC,QAAQ,EAAE,gBAAgB,EAAE,cAAc,EAAER,YAAY,CAACnE,EAAE,EAAE,SAAS;IAAC,CAAC,EAAE;MAClG4E,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE;QACRV,YAAY,EAAEA,YAAY;QAC1BvF,QAAQ,EAAEA;OACX;MACDkG,UAAU,EAAGC,WAAuB,IAAI;QACtC,IAAGA,WAAW,EAAE;UACdZ,YAAY,CAACT,MAAM,GAAG,UAAU;UAChCS,YAAY,CAACa,YAAY,GAAGD,WAAW,CAAC/E,EAAE;UAC1CmE,YAAY,CAACc,SAAS,GAAGF,WAAW;UACpCN,OAAO,CAACN,YAAY,CAAC;;MAEzB;KACD,CAAC;EACJ;EAEA;;;;;;EAMOe,YAAYA,CAACf,YAAuC,EAAEvF,QAAkB,EAAE6F,OAA4B;IAC3G,IAAI,CAACrG,EAAE,CAACsG,QAAQ,CAAC;MAACC,KAAK,EAAE,CAAC,QAAQ,EAAE,gBAAgB,EAAE,cAAc,EAAER,YAAY,CAACnE,EAAE,EAAE,SAAS;IAAC,CAAC,EAAE;MAClG4E,KAAK,EAAE,IAAI;MACXC,QAAQ,EAAE;QACRM,OAAO,EAAE,IAAI;QACbhB,YAAY,EAAEA,YAAY;QAC1BvF,QAAQ,EAAEA;OACX;MACDkG,UAAU,EAAGC,WAAuB,IAAI;QACtC,IAAGA,WAAW,EAAE;UACdZ,YAAY,CAACc,SAAS,GAAGF,WAAW;UACpCN,OAAO,CAACN,YAAY,CAAC;;MAEzB;KACD,CAAC;EACJ;EAEaiB,iBAAiBA,CAACjB,YAAuC,EAAEkB,IAAc,EAAEZ,OAA4B;IAAA,IAAAa,KAAA;IAAA,OAAAC,mHAAA;MAClHF,IAAI,CAACG,UAAU,GAAG,IAAI;MACtB,IAAI;QACF,IAAIC,QAAQ,SAASH,KAAI,CAAC/G,YAAa,CAAC6G,iBAAiB,CAACjB,YAAY,CAACc,SAAU,CAACjF,EAAE,CAAC;QACrF,IAAGyF,QAAQ,EAAE;UACXtB,YAAY,CAACT,MAAM,GAAG,WAAW;UACjCS,YAAY,CAACa,YAAY,GAAG,IAAI;UAChCb,YAAY,CAACc,SAAS,GAAGS,SAAS;UAClCjB,OAAO,CAACN,YAAY,CAAC;;OAExB,CAAC,OAAOwB,KAAU,EAAE;QACnBN,IAAI,CAACM,KAAK,CAACA,KAAK,CAACC,OAAO,IAAID,KAAK,CAAC;OACnC,SAAS;QACRN,IAAI,CAACG,UAAU,GAAG,KAAK;;IACxB;EACH;EAEOK,oBAAoBA,CAACC,QAAwB,EAAEC,SAAyB;IAC7E,OAAO;MACL,cAAc,EAAED,QAAQ,CAACE,YAAY,CAACC,MAAM,CAACpG,CAAC,IAAI,CAACkG,SAAS,CAACC,YAAY,CAAC5E,QAAQ,CAACvB,CAAC,CAAC,CAAC;MACtF,4BAA4B,EAAE,CAACiG,QAAQ,CAACI,0BAA0B,CAACnG,MAAM,GAAG,EAAE,GAAI+F,QAAQ,CAACI,0BAA0B,CAACD,MAAM,CAACpG,CAAC,IAAIkG,SAAS,CAACG,0BAA0B,CAAC9E,QAAQ,CAACvB,CAAC,CAAC,CAAC,CAACE,MAAM,GAAG,EAAE,GAAG+F,QAAQ,CAACI,0BAA2B;MACtO,0BAA0B,EAAE,CAACJ,QAAQ,CAACK,wBAAwB,CAACpG,MAAM,GAAG,EAAE,GAAI+F,QAAQ,CAACK,wBAAwB,CAACF,MAAM,CAACpG,CAAC,IAAIkG,SAAS,CAACI,wBAAwB,CAAC/E,QAAQ,CAACvB,CAAC,CAAC,CAAC,CAACE,MAAM,GAAG,EAAE,GAAG+F,QAAQ,CAACK,wBAAyB;MAC5N,mBAAmB,EAAE,CAACL,QAAQ,CAACM,iBAAiB,CAACrG,MAAM,GAAG,EAAE,GAAI+F,QAAQ,CAACM,iBAAiB,CAACH,MAAM,CAACpG,CAAC,IAAIkG,SAAS,CAACK,iBAAiB,CAAChF,QAAQ,CAACvB,CAAC,CAAC,CAAC,CAACE,MAAM,GAAG,EAAE,GAAG+F,QAAQ,CAACM;KACxK;EACH;;SApOWpI,oBAAoB;;mBAApBA,MAAoB,EAAAqI,sDAAA,CAAAE,sEAAA,GAAAF,sDAAA,CAAAI,sEAAA,GAAAJ,sDAAA,CAAAM,8EAAA,GAAAN,sDAAA,CAAAQ,0EAAA,GAAAR,sDAAA,CAAAU,2FAAA,GAAAV,sDAAA,CAAAY,kFAAA,GAAAZ,sDAAA,CAAAc,8EAAA,GAAAd,sDAAA,CAAAU,2FAAA;AAAA;;SAApB/I,MAAoB;EAAAqJ,OAAA,EAApBrJ,MAAoB,CAAAsJ,IAAA;EAAAC,UAAA,EAFnB;AAAM","sources":["./src/app/modules/gestao/plano-trabalho/plano-trabalho.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { PlanoTrabalhoDaoService } from 'src/app/dao/plano-trabalho-dao.service';\nimport { Documento, HasDocumentos } from 'src/app/models/documento.model';\nimport { PlanoTrabalhoEntrega, PlanoTrabalhoEntregaTipo } from 'src/app/models/plano-trabalho-entrega.model';\nimport { PlanoTrabalho } from 'src/app/models/plano-trabalho.model';\nimport { Template } from 'src/app/models/template.model';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { LookupItem, LookupService } from 'src/app/services/lookup.service';\nimport { TemplateService } from '../../uteis/templates/template.service';\nimport { PlanoTrabalhoConsolidacao } from 'src/app/models/plano-trabalho-consolidacao.model';\nimport { Programa } from 'src/app/models/programa.model';\nimport { UtilService } from 'src/app/services/util.service';\nimport { NavigateService } from 'src/app/services/navigate.service';\nimport { Avaliacao } from 'src/app/models/avaliacao.model';\nimport { PageBase } from '../../base/page-base';\nimport { AvaliacaoDaoService } from 'src/app/dao/avaliacao-dao.service';\n\nexport type RefreshConsolidacao = (consolidacao: PlanoTrabalhoConsolidacao) => void;\n\nexport type BadgeTrabalho = {\n  titulo: string,\n  cor: string,\n  nome: string,\n  descricao: string,\n  tipo: PlanoTrabalhoEntregaTipo\n}\n\nexport type AssinaturaList = { \n  \"participante\": string[], \n  \"gestores_unidade_executora\": string[], \n  \"gestores_unidade_lotacao\": string[], \n  \"gestores_entidade\": string[], \n  \"todas\"?: string[]\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PlanoTrabalhoService {\n\n  constructor(\n    public auth: AuthService,\n    public util: UtilService,\n    public go: NavigateService,\n    public lookup: LookupService,\n    public dao: PlanoTrabalhoDaoService,\n    public avaliacaoDao: AvaliacaoDaoService,\n    public templateService: TemplateService,\n    public planoTrabalhoDao: PlanoTrabalhoDaoService\n  ) { }\n\n  public template(plano: PlanoTrabalho): Template | undefined {\n    return plano.programa?.template_tcr;\n  }\n\n  public metadados(plano: PlanoTrabalho) {\n    return {\n      needSign: this.needSign.bind(this),\n      extraTags: this.extraTags.bind(this),\n      especie: \"TCR\",\n      titulo: \"Termo de Ciência e Responsabilidade\",\n      dataset: this.planoTrabalhoDao.dataset(),\n      datasource: this.planoTrabalhoDao.datasource(plano),\n      template: plano.programa?.template_tcr,\n      template_id: plano.programa?.template_tcr_id\n    };\n  }\n\n  public needSign(parent?: HasDocumentos, item?: Documento): boolean {\n    const plano = parent as PlanoTrabalho;\n    const documento = item || (plano?.documentos || []).find(x => plano?.documento_id?.length && x.id == plano?.documento_id) || plano?.documento;\n    if (parent && documento && !documento.assinaturas?.find(x => x.usuario_id == this.auth.usuario!.id)) {\n      const tipoModalidade = plano.tipo_modalidade;\n      const programa = plano.programa;\n      const entidade = this.auth.entidade!;\n      let ids: string[] = [];\n      if (programa?.plano_trabalho_assinatura_participante) ids.push(plano.usuario_id);\n      if (programa?.plano_trabalho_assinatura_gestor_lotacao) ids.push(...this.auth.gestoresLotacao.map(x => x.id));\n      if (programa?.plano_trabalho_assinatura_gestor_unidade) ids.push(plano.unidade?.gestor?.id || \"\", plano.unidade?.gestor_substituto?.id || \"\");\n      if (programa?.plano_trabalho_assinatura_gestor_entidade) ids.push(entidade.gestor_id || \"\", entidade.gestor_substituto_id || \"\");\n      return !!tipoModalidade && ids.includes(this.auth.usuario!.id);\n    }\n    return false;\n  }\n\n  public extraTags(parent: HasDocumentos, documento: Documento, metadado: any): LookupItem[] {\n    const plano = parent as PlanoTrabalho;\n    let tags: LookupItem[] = [];\n    if (plano?.documento_id == documento.id) tags.push({ key: documento.id, value: \"Vigente\", icon: \"bi bi-check-all\", color: \"primary\" })\n    if (JSON.stringify(metadado.tags) != JSON.stringify(tags)) metadado.tags = tags;\n    return metadado.tags;\n  }\n\n  /**\n   * Método retorna um badge de acordo com o tipo de entrega recebida no parâmetro 'planoTrabalhoEntrega'. Esse tipo poderá ser 'entrega associada a uma entrega da própria unidade', \n   * 'entrega associada a uma entrega de outra unidade', 'entrega associada a outro órgão/entidade', ou ainda 'entrega não vinculada'.\n   * @param planoTrabalhoEntrega  Entrega do Plano de Trabalho cujo tipo será analisado.\n   * @param planoTrabalho         Plano de Trabalho ao qual pertence a entrega a ser analisada. Se não for informado, o método tentará obtê-lo diretamente da própria entrega recebida.\n   * @returns \n   */\n  public tipoEntrega(planoTrabalhoEntrega: PlanoTrabalhoEntrega, planoTrabalho?: PlanoTrabalho): BadgeTrabalho {\n    /* Se planoTrabalhoEntrega for uma entrega vinda do banco de dados, e pertencer a alguma unidade (seja ela a própria do plano de trabalho, ou outra), ela traz consigo planoTrabalhoEntrega.plano_entrega_entrega?.plano_entrega?.unidade_id,\n       que será usado para definir a qual tipo de unidade ela está vinculada (própria ou outra). Se planoTrabalhoEntrega não estiver vinculada a nenhuma unidade, ela poderá possuir planoTrabalhoEntrega.orgao \n       (caso em que estará 'vinculada a outro órgão/entidade'), ou não (caso em que será uma 'entrega não vinculada').\n       Se planoTrabalhoEntrega não vier do banco, ou seja, acabou de ser incluída no grid, ela passou pelo método saveEntrega() e lá foi anexado o objeto 'plano?._metadata?.novaEntrega'. */\n    let plano = planoTrabalho || planoTrabalhoEntrega.plano_trabalho;\n    let key: PlanoTrabalhoEntregaTipo = planoTrabalhoEntrega.plano_entrega_entrega?.plano_entrega?.unidade_id == plano!.unidade_id ? \"PROPRIA_UNIDADE\" :\n      (planoTrabalhoEntrega.plano_entrega_entrega ? \"OUTRA_UNIDADE\" : \n      (!!planoTrabalhoEntrega.orgao?.length ? \"OUTRO_ORGAO\" : \"SEM_ENTREGA\"));\n    let result = this.lookup.ORIGENS_ENTREGAS_PLANO_TRABALHO.find(x => x.key == key) || {key: \"\", value: \"Desconhecido1\"};\n    let nome = plano?._metadata?.novaEntrega?.plano_entrega_entrega?.entrega?.nome || planoTrabalhoEntrega.plano_entrega_entrega?.entrega?.nome || \"Desconhecido2\";\n    let descricao = plano?._metadata?.novaEntrega?.plano_entrega_entrega?.descricao || planoTrabalhoEntrega.plano_entrega_entrega?.descricao || \"\";\n    return { titulo: result.value, cor: result.color || \"danger\", nome: nome, tipo: key, descricao: descricao};\n  }\n\n  /**\n   * Método atualiza o TCR caso ele exista (possivelmente obrigatório pelo programa), e caso ele não esteja assinado. \n   * Em caso de estar assinado ou ser obrigatório e não exista ainda, será gerado um novo documento.\n   * @param planoReferencia  Plano de trabalho para comparação (contendo as entregas)\n   * @param planoNovo        Plano de trabalho modificado, com as novas informações (contendo as entregas, programa.template_tcr e documentos)\n   * @param ?textUsuario     Texto complementar do usuário, caso não seja informado, irá utilizar o do planoNovo.usuario.texto_complementar_plano\n   * @param ?textUnidade     Texto complementar da unidade, caso não seja informado, irá utilizar o do planoNovo.unidade.texto_complementar_plano\n   * @returns                Documento gerado ou modificado (observar o _status)\n   */\n  public atualizarTcr(planoReferencia: PlanoTrabalho, planoNovo: PlanoTrabalho, textUsuario?: string, textUnidade?: string) {\n    if (planoNovo.usuario && planoNovo.unidade) {\n      let dsReferencia = this.dao!.datasource(planoReferencia);\n      let dsNovo = this.dao!.datasource(planoNovo);\n      let programa = planoNovo.programa;\n      /* Atualiza os campos de texto complementar do usuário e da unidade */\n      dsNovo.usuario.texto_complementar_plano = textUsuario || planoNovo.usuario?.texto_complementar_plano || \"\";\n      dsNovo.unidade.texto_complementar_plano = textUnidade || planoNovo.unidade?.texto_complementar_plano || \"\";\n      /* Se tiver modificações e o termo for obrigatório ou já exista um documento */\n      if ((programa?.termo_obrigatorio || planoNovo.documento_id?.length) && JSON.stringify(dsNovo) != JSON.stringify(dsReferencia) && programa?.template_tcr) {\n        let documento = planoNovo.documentos?.find((x: Documento) => x.id == planoNovo.documento_id);\n        if (!planoNovo.documento_id?.length || !documento || documento.assinaturas?.length || documento.tipo == \"LINK\") {\n          documento = new Documento({\n            id: this.dao?.generateUuid(),\n            tipo: \"HTML\",\n            especie: \"TCR\",\n            titulo: \"Termo de Ciência e Responsabilidade\",\n            conteudo: this.templateService.renderTemplate(programa?.template_tcr?.conteudo || \"\", dsNovo),\n            status: \"GERADO\",\n            _status: \"ADD\",\n            template: programa?.template_tcr?.conteudo,\n            dataset: this.dao!.dataset(),\n            datasource: dsNovo,\n            entidade_id: this.auth.entidade?.id,\n            plano_trabalho_id: planoNovo.id,\n            template_id: programa?.template_tcr_id\n          });\n          planoNovo.documentos.push(documento);\n        } else {\n          documento.conteudo = this.templateService.renderTemplate(programa?.template_tcr?.conteudo || \"\", dsNovo);\n          documento.dataset = this.dao!.dataset();\n          documento.datasource = dsNovo;\n          documento._status = documento._status == \"ADD\" ? \"ADD\" : \"EDIT\";\n        }\n        planoNovo.documento = documento;\n        planoNovo.documento_id = documento?.id || null;\n      }\n    }\n    return planoNovo.documento;\n  }\n\n  /**\n   * Informa a situação do plano de trabalho recebido como parâmetro, ou seja, se foi EXCLUIDO ou ARQUIVADO, ou, caso contrário, o seu status atual.\n   * @param planoTrabalho \n   * @returns \n   */\n  public situacaoPlano(planoTrabalho: PlanoTrabalho): string {\n    if (planoTrabalho.deleted_at) return \"EXCLUIDO\";\n    else if (planoTrabalho.data_arquivamento) return \"ARQUIVADO\";\n    else return planoTrabalho.status!;\n  }\n\n  /**\n   * Informa se o plano de trabalho recebido como parâmetro é válido, ou seja, não foi deletado, não foi cancelado nem foi arquivado.\n   * @param planoTrabalho \n   * @returns \n   */\n    public isValido(planoTrabalho: PlanoTrabalho): boolean {\n      return !planoTrabalho.deleted_at && planoTrabalho.status != 'CANCELADO' && !planoTrabalho.data_arquivamento;\n    }\n\n  /**\n   * Calcula a quantidade de dias para concluir a consolidação considerando a tolerância configurada no programa.\n   * @param consolidacao  Consolidacao do plano de trabalho\n   * @param programa      Programa\n   * @returns             Quantidade de dias para conclusão (Retorna números negativos caso tenha passado o prazo)\n   */\n  public diasParaConcluirConsolidacao(consolidacao?: PlanoTrabalhoConsolidacao, programa?: Programa): number {\n    return !consolidacao || !programa ? -1 : this.util.daystamp(consolidacao.data_fim) + programa.dias_tolerancia_avaliacao - this.util.daystamp(this.auth.hora);\n  }\n\n  /**\n   * Faz avaliação da consolidação\n   * @param consolidacao \n   * @param programa\n   * @param refresh\n   */\n  public avaliar(consolidacao: PlanoTrabalhoConsolidacao, programa: Programa, refresh: RefreshConsolidacao) {\n    this.go.navigate({route: ['gestao', 'plano-trabalho', 'consolidacao', consolidacao.id, 'avaliar']}, {\n      modal: true, \n      metadata: {\n        consolidacao: consolidacao,\n        programa: programa\n      },\n      modalClose: (modalResult?: Avaliacao) => {\n        if(modalResult) {\n          consolidacao.status = \"AVALIADO\";\n          consolidacao.avaliacao_id = modalResult.id;\n          consolidacao.avaliacao = modalResult;\n          refresh(consolidacao); \n        }\n      }\n    });\n  }\n\n  /**\n   * Fas recurso contra avaliação\n   * @param consolidacao \n   * @param programa\n   * @param refresh\n   */\n  public fazerRecurso(consolidacao: PlanoTrabalhoConsolidacao, programa: Programa, refresh: RefreshConsolidacao) {\n    this.go.navigate({route: ['gestao', 'plano-trabalho', 'consolidacao', consolidacao.id, 'recurso']}, {\n      modal: true, \n      metadata: {\n        recurso: true,\n        consolidacao: consolidacao,\n        programa: programa\n      },\n      modalClose: (modalResult?: Avaliacao) => {\n        if(modalResult) {\n          consolidacao.avaliacao = modalResult;\n          refresh(consolidacao);\n        }\n      }\n    });\n  }\n\n  public async cancelarAvaliacao(consolidacao: PlanoTrabalhoConsolidacao, page: PageBase, refresh: RefreshConsolidacao) {\n    page.submitting = true;\n    try {\n      let response = await this.avaliacaoDao!.cancelarAvaliacao(consolidacao.avaliacao!.id);\n      if(response) {\n        consolidacao.status = \"CONCLUIDO\";\n        consolidacao.avaliacao_id = null;\n        consolidacao.avaliacao = undefined;\n        refresh(consolidacao);\n      }\n    } catch (error: any) {\n      page.error(error.message || error);\n    } finally {\n      page.submitting = false;\n    }\n  }\n\n  public assinaturasFaltantes(exigidas: AssinaturaList, assinaram: AssinaturaList): AssinaturaList {\n    return {\n      \"participante\": exigidas.participante.filter(x => !assinaram.participante.includes(x)),\n      \"gestores_unidade_executora\": !exigidas.gestores_unidade_executora.length ? [] : (exigidas.gestores_unidade_executora.filter(x => assinaram.gestores_unidade_executora.includes(x)).length ? [] : exigidas.gestores_unidade_executora),\n      \"gestores_unidade_lotacao\": !exigidas.gestores_unidade_lotacao.length ? [] : (exigidas.gestores_unidade_lotacao.filter(x => assinaram.gestores_unidade_lotacao.includes(x)).length ? [] : exigidas.gestores_unidade_lotacao),\n      \"gestores_entidade\": !exigidas.gestores_entidade.length ? [] : (exigidas.gestores_entidade.filter(x => assinaram.gestores_entidade.includes(x)).length ? [] : exigidas.gestores_entidade),\n    };\n  }\n\n/*   public assinaturaUsuarioEhExigida(exigidas: AssinaturaList): boolean {\n    return [...exigidas.participante, ...exigidas.gestores_unidade_executora, ...exigidas.gestores_unidade_lotacao, ...exigidas.gestores_entidade].includes(this.auth.usuario?.id!); \n  } */\n  \n}\n"],"names":["Documento","PlanoTrabalhoService","constructor","auth","util","go","lookup","dao","avaliacaoDao","templateService","planoTrabalhoDao","template","plano","programa","template_tcr","metadados","needSign","bind","extraTags","especie","titulo","dataset","datasource","template_id","template_tcr_id","parent","item","documento","documentos","find","x","documento_id","length","id","assinaturas","usuario_id","usuario","tipoModalidade","tipo_modalidade","entidade","ids","plano_trabalho_assinatura_participante","push","plano_trabalho_assinatura_gestor_lotacao","gestoresLotacao","map","plano_trabalho_assinatura_gestor_unidade","unidade","gestor","gestor_substituto","plano_trabalho_assinatura_gestor_entidade","gestor_id","gestor_substituto_id","includes","metadado","tags","key","value","icon","color","JSON","stringify","tipoEntrega","planoTrabalhoEntrega","planoTrabalho","plano_trabalho","plano_entrega_entrega","plano_entrega","unidade_id","orgao","result","ORIGENS_ENTREGAS_PLANO_TRABALHO","nome","_metadata","novaEntrega","entrega","descricao","cor","tipo","atualizarTcr","planoReferencia","planoNovo","textUsuario","textUnidade","dsReferencia","dsNovo","texto_complementar_plano","termo_obrigatorio","generateUuid","conteudo","renderTemplate","status","_status","entidade_id","plano_trabalho_id","situacaoPlano","deleted_at","data_arquivamento","isValido","diasParaConcluirConsolidacao","consolidacao","daystamp","data_fim","dias_tolerancia_avaliacao","hora","avaliar","refresh","navigate","route","modal","metadata","modalClose","modalResult","avaliacao_id","avaliacao","fazerRecurso","recurso","cancelarAvaliacao","page","_this","_asyncToGenerator","submitting","response","undefined","error","message","assinaturasFaltantes","exigidas","assinaram","participante","filter","gestores_unidade_executora","gestores_unidade_lotacao","gestores_entidade","i0","ɵɵinject","i1","AuthService","i2","UtilService","i3","NavigateService","i4","LookupService","i5","PlanoTrabalhoDaoService","i6","AvaliacaoDaoService","i7","TemplateService","factory","ɵfac","providedIn"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}